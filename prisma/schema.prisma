// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model AuthUser {
  id             String           @id @unique
  email          String           @unique
  email_verified Boolean
  admin_verified Boolean
  is_admin       Boolean
  is_brand       Boolean
  profile        Profile?
  brand_profile  BrandProfile?
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  object         object[]
  Deal           Deal[]
  userDealStatus UserDealStatus[]
  // for users
  acceptedDeals  String[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model object {
  id           String    @id @unique(map: "id") @default("1")
  created      DateTime? @default(now())
  file_name    String?
  file_size    Int?
  file_type    String?
  image_number Int       @default(1) // new field
  authUser     AuthUser  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@map("object")
}

model Profile {
  user_id   String    @id
  name      String
  sport     String
  college   String
  year      String
  bio       String
  auth_user AuthUser? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profile")
}

model Email {
  id            String   @id @unique
  subject       String
  email_address String
  date_sent     DateTime
  content       String

  @@map("email")
}

model BrandProfile {
  user_id          String    @id
  name             String
  location         String
  industry         String
  size             String
  goals            String
  socialMediaLinks String
  bio              String?
  auth_user        AuthUser? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("brand_profile")
}

model Deal {
  id                      String    @id @unique @default(uuid())
  title                   String
  description             String
  sportPreference         String
  genderPreference        String
  shortDescription        String
  location                String
  inPersonOrVirtual       String
  dateTime                String
  duration                String
  mainGoal                String
  estimatedPayment        String
  recommendedDeliverables String[]
  athleteCount            Int
  singleOrMultiple        String
  publishDate             DateTime?
  authUser                AuthUser  @relation(fields: [authUserId], references: [id])
  authUserId              String
  isCampaign              Boolean

  rejectedIds    String[]
  acceptedIds    String[]
  userDealStatus UserDealStatus[]

  @@map("deal")
}

model UserDealStatus {
  userId String
  dealId String
  status String   @default("pending") // can be "accepted", "rejected", or "pending"
  user   AuthUser @relation(fields: [userId], references: [id])
  deal   Deal     @relation(fields: [dealId], references: [id])

  @@id([userId, dealId])
  @@map("user_deal_status")
}
